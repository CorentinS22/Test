78936ee51f034b1c9f30a17f05af9f6e
class Interval {
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }

  toString() {
    return "[" + this.start + "" + this.end + "]";
  }
  /**
   * Exemple 1 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.overlaps(interval2) => true
   *
   * Exemple 2 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                                       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.overlaps(interval2) => false
   *
   * @param {Interval} interval
   * @returns {boolean}
   */


  overlaps(interval) {
    return this.end > interval.start && this.start < interval.end;
  }
  /**
   * Retourne true si cet interval contient le paramètre interval
   *
   * Exemple 1 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.includes(interval2) => true
   *
   * Exemple 2 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.includes(interval2) => false
   *
   * @param {Interval} interval
   * @returns {boolean}
   */


  includes(interval) {
    return interval.start >= this.start && interval.end <= this.end;
  }

  /**
   * Retourne l'union de deux intervals
   *
   * Exemple 1 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
   *
   * Exemple 2 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
   *
   * @param {Interval} interval
   * @returns {Interval[]}
   */
  union(interval) {
    let debut = this.start;
    let fin = this.end;

    if (this.end < interval.start) {
      return [this, interval];
    } else if (interval.end < this.start) {
      return [interval, this];
    }

    if (interval.start > this.start) {
      debut = this.start;
    } else {
      debut = interval.start;
    }

    if (interval.end < this.end) {
      fin = this.end;
    } else {
      fin = interval.end;
    }

    return new Interval(debut, fin);
  }

  /**
   * Retourne l'intersection de deux intervals
   *
   * Exemple 1 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.intersection(interval2) =>                     ▒▒▒▒▒
   *
   * Exemple 2 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.intersection(interval2) => <tableau vide>
   *
   * @param {Interval} interval
   * @returns {Interval|null}
   */
  intersection(interval) {
    let debut = null;
    let fin = null;

    if (this.end > interval.start && this.start < interval.start) {
      debut = interval.start;

      for (let i = debut; i <= this.end; i++) {
        if (i > interval.end) {
          break;
        }

        fin = i;
      }
    } else if (interval.end > this.start && interval.start < this.start) {
      debut = this.start;

      for (let j = 0; j <= interval.end; j++) {
        if (j > this.end) {
          break;
        }

        fin = j;
      }
    }

    if (debut == null) {
      return null;
    }

    return new Interval(debut, fin);
  }

  /**
   * Retourne l'exclusion de deux intervals
   *
   * Exemple 1 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒     ▒▒▒▒▒▒▒▒
   *
   * Exemple 2 :
   *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
   *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
   *
   * @param {Interval} interval
   * @returns {Interval[]}
   */
  exclusion(interval) {}

}

module.exports = Interval;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,