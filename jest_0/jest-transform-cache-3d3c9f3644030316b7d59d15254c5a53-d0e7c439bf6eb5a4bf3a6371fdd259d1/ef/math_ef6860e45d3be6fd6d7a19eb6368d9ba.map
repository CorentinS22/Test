{"version":3,"sources":["math.js"],"names":["Util","factorial","n","isPrime","i","sumPrime","somme","fizzBuzz","tableau","number","push","cipher","phrase","phrase2","length","String","fromCharCode","charCodeAt","pairs","array","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAG,EAAX;;AACAA,IAAI,CAACC,SAAL,GAAkBC,CAAD,IAAO;AACpB,MAAIA,CAAC,KAAK,CAAV,EAAa;AACT,WAAO,CAAP;AACH;;AAED,MAAIA,CAAC,IAAI,IAAT,EAAe;AACX,UAAM,aAAN;AACH;;AAED,MAAIA,CAAC,GAAG,CAAR,EAAW;AACP,UAAM,eAAN;AACH;;AAED,SAAOA,CAAC,GAAGF,IAAI,CAACC,SAAL,CAAeC,CAAC,GAAG,CAAnB,CAAX;AACH,CAdD;AAgBA;;;;;;;;;;AAQAF,IAAI,CAACG,OAAL,GAAe,UAAUD,CAAV,EAAa;AACxB,MAAIA,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwB;AACpB,WAAO,KAAP;AACH;;AACD,MAAIA,CAAC,GAAG,CAAR,EAAW;AACP,UAAM,mCAAN;AACH;;AACD,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EACI,IAAIF,CAAC,GAAGE,CAAJ,KAAU,CAAd,EAAiB,OAAO,KAAP;;AACrB,SAAO,IAAP;AAEH,CAXD;AAcA;;;;;;;;;;;AASAJ,IAAI,CAACK,QAAL,GAAgB,UAASH,CAAT,EAAY;AAExB,MAAII,KAAK,GAAG,CAAZ;;AAEA,OAAKF,CAAC,GAAC,CAAP,EAAUA,CAAC,IAAEF,CAAb,EAAgB,EAAEE,CAAlB,EACA;AACI,QAAIJ,IAAI,CAACG,OAAL,CAAaC,CAAb,CAAJ,EACA;AACIE,MAAAA,KAAK,IAAEF,CAAP;AACH;AACJ;;AAED,SAAOE,KAAP;AACH,CAbD;AAeA;;;;;;;;;;;;;;AAYAN,IAAI,CAACO,QAAL,GAAgB,UAASL,CAAT,EAAY;AAExB,MAAIM,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIP,CAA/B,EAAkCO,MAAM,EAAxC,EAA4C;AAExC,QAAIA,MAAM,GAAG,CAAT,IAAc,CAAd,IAAmBA,MAAM,GAAG,CAAT,IAAc,CAArC,EAAwC;AACpCD,MAAAA,OAAO,CAACE,IAAR,CAAc,UAAd;AACH,KAFD,MAEM,IAAID,MAAM,GAAG,CAAT,IAAc,CAAlB,EAAqB;AACvBD,MAAAA,OAAO,CAACE,IAAR,CAAc,MAAd;AACH,KAFK,MAEA,IAAID,MAAM,GAAG,CAAT,IAAc,CAAlB,EAAqB;AACvBD,MAAAA,OAAO,CAACE,IAAR,CAAa,MAAb;AACH,KAFK,MAEA;AACFF,MAAAA,OAAO,CAACE,IAAR,CAAaD,MAAb;AACH;AAEJ;;AAED,SAAOD,OAAP;AACH,CAnBD;AAqBA;;;;;;;;;;;AASAR,IAAI,CAACW,MAAL,GAAc,UAAUC,MAAV,EAAkB;AAE5B,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIT,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACQ,MAAM,CAACE,MAAvB,EAA+B,EAAEV,CAAjC,EACA;AACI,QAAIQ,MAAM,CAACR,CAAD,CAAN,IAAa,GAAjB,EACA;AACIS,MAAAA,OAAO,IAAIE,MAAM,CAACC,YAAP,CAAoBJ,MAAM,CAACR,CAAD,CAAN,CAAUa,UAAV,CAAqB,CAArB,IAAwB,CAA5C,CAAX;AACH,KAHD,MAKA;AACIJ,MAAAA,OAAO,IAAI,GAAX;AACH;AACJ;;AAED,SAAQA,OAAR;AACH,CAjBD;AAmBA;;;;;;;;;;;;;;AAYAb,IAAI,CAACkB,KAAL,GAAa,UAASC,KAAT,EAAgB,CAI5B,CAJD;;AAOAC,MAAM,CAACC,OAAP,GAAiBrB,IAAjB","sourcesContent":["let Util = {};\nUtil.factorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n\n    if (n >= 3000) {\n        throw 'n too large'\n    }\n\n    if (n < 0) {\n        throw 'n is negative'\n    }\n\n    return n * Util.factorial(n - 1);\n};\n\n/**\n * Détermine si n est un nombre premier.\n * Util.isPrime(5) => false\n * Util.isPrime(6) => true\n *\n * @param {number} n\n * @returns {boolean}\n */\nUtil.isPrime = function (n) {\n    if (n === 1 || n === 0) {\n        return false;\n    }\n    if (n < 0) {\n        throw 'Unable to compute prime for n < 0'\n    }\n    for (var i = 2; i < n; i++)\n        if (n % i === 0) return false;\n    return true;\n\n};\n\n\n/**\n * Additionne l'ensemble des nombres premiers de 2 à n\n *\n * Util.sumPrime(6) = 2 + 3 + 5 = 10\n * Util.sumPrime(8) = 2 + 3 + 5 + 7 = 17\n *\n * @param {number} n\n * @returns {number}\n */\nUtil.sumPrime = function(n) {\n\n    let somme = 0;\n\n    for (i=2; i<=n; ++i)\n    {\n        if (Util.isPrime(i))\n        {\n            somme+=i;\n        }\n    }\n\n    return somme;\n};\n\n/**\n * Cette méthode doit retourner un tableau de 1 à n tel que:\n * - Pour les nombres multiples de 3, les remplacer par \"Fizz\"\n * - Pour les nombres multiples de 5, les remplacer par \"Buzz\"\n * - Pour les nombres multiples de 3 et 5, les remplacer par \"FizzBuzz\"\n *\n * Exp :\n * Util.fizzBuzz(15) => [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n *\n * @param {number} n\n * @returns {array}\n */\nUtil.fizzBuzz = function(n) {\n\n    var tableau = [];\n\n    for (let number = 1; number <= n; number++) {\n\n        if (number % 3 == 0 && number % 5 == 0) {\n            tableau.push( \"FizzBuzz\");\n        }else if (number % 3 == 0) {\n            tableau.push( \"Fizz\");\n        }else if (number % 5 == 0) {\n            tableau.push(\"Buzz\");\n        }else {\n            tableau.push(number);\n        }\n\n    }\n\n    return tableau;\n};\n\n/**\n * Chiffre une phrase selon la règle suivante : Les A deviennent des B, les B des C, etc.\n *\n * Exp :\n * Util.cipher(\"Test Unitaire\") => \"Uftu Tojubjsf\"\n *\n * @param phrase\n * @returns {string}\n */\nUtil.cipher = function (phrase) {\n\n    let phrase2 = \"\";\n\n    for (let i=0; i<phrase.length; ++i)\n    {\n        if (phrase[i] != \" \")\n        {\n            phrase2 += String.fromCharCode(phrase[i].charCodeAt(0)+1);\n        }\n        else\n        {\n            phrase2 += \" \";\n        }\n    }\n\n    return (phrase2)\n};\n\n/**\n * Retourne le nombre de paires dans un tableau\n *\n * Exp :\n *\n * Util.pairs([3,3]) => 1\n * Util.pairs([3,3,5,]) => 1\n * Util.pairs([3,3,5,5,5]) => 4\n *\n * @param array\n * @return int\n */\nUtil.pairs = function(array) {\n\n\n\n};\n\n\nmodule.exports = Util;\n\n"]}