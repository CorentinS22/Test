b1f466c39fa162c5d50f84b79d1e8831
let Util = {};

Util.factorial = n => {
  if (n === 0) {
    return 1;
  }

  if (n >= 3000) {
    throw 'n too large';
  }

  if (n < 0) {
    throw 'n is negative';
  }

  return n * Util.factorial(n - 1);
};
/**
 * Détermine si n est un nombre premier.
 * Util.isPrime(5) => false
 * Util.isPrime(6) => true
 *
 * @param {number} n
 * @returns {boolean}
 */


Util.isPrime = function (n) {
  if (n === 1 || n === 0) {
    return false;
  }

  if (n < 0) {
    throw 'Unable to compute prime for n < 0';
  }

  for (var i = 2; i < n; i++) if (n % i === 0) return false;

  return true;
};
/**
 * Additionne l'ensemble des nombres premiers de 2 à n
 *
 * Util.sumPrime(6) = 2 + 3 + 5 = 10
 * Util.sumPrime(8) = 2 + 3 + 5 + 7 = 17
 *
 * @param {number} n
 * @returns {number}
 */


Util.sumPrime = function (n) {
  let somme = 0;

  for (i = 2; i <= n; ++i) {
    if (Util.isPrime(i)) {
      somme += i;
    }
  }

  return somme;
};
/**
 * Cette méthode doit retourner un tableau de 1 à n tel que:
 * - Pour les nombres multiples de 3, les remplacer par "Fizz"
 * - Pour les nombres multiples de 5, les remplacer par "Buzz"
 * - Pour les nombres multiples de 3 et 5, les remplacer par "FizzBuzz"
 *
 * Exp :
 * Util.fizzBuzz(15) => [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz"]
 *
 * @param {number} n
 * @returns {array}
 */


Util.fizzBuzz = function (n) {
  var tableau = [];

  for (let number = 1; number <= n; number++) {
    if (number % 3 == 0 && number % 5 == 0) {
      tableau.push("FizzBuzz");
    } else if (number % 3 == 0) {
      tableau.push("Fizz");
    } else if (number % 5 == 0) {
      tableau.push("Buzz");
    } else {
      tableau.push(number);
    }
  }

  return tableau;
};
/**
 * Chiffre une phrase selon la règle suivante : Les A deviennent des B, les B des C, etc.
 *
 * Exp :
 * Util.cipher("Test Unitaire") => "Uftu Tojubjsf"
 *
 * @param phrase
 * @returns {string}
 */


Util.cipher = function (phrase) {
  let phrase2 = "";

  for (let i = 0; i < phrase.length; ++i) {
    if (phrase[i] != " ") {
      phrase2 += String.fromCharCode(phrase[i].charCodeAt(0) + 1);
    } else {
      phrase2 += " ";
    }
  }

  return phrase2;
};
/**
 * Retourne le nombre de paires dans un tableau
 *
 * Exp :
 *
 * Util.pairs([3,3]) => 1
 * Util.pairs([3,3,5,]) => 1
 * Util.pairs([3,3,5,5,5]) => 4
 *
 * @param array
 * @return int
 */


Util.pairs = function (array) {};

module.exports = Util;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGguanMiXSwibmFtZXMiOlsiVXRpbCIsImZhY3RvcmlhbCIsIm4iLCJpc1ByaW1lIiwiaSIsInN1bVByaW1lIiwic29tbWUiLCJmaXp6QnV6eiIsInRhYmxlYXUiLCJudW1iZXIiLCJwdXNoIiwiY2lwaGVyIiwicGhyYXNlIiwicGhyYXNlMiIsImxlbmd0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJwYWlycyIsImFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHLEVBQVg7O0FBQ0FBLElBQUksQ0FBQ0MsU0FBTCxHQUFrQkMsQ0FBRCxJQUFPO0FBQ3BCLE1BQUlBLENBQUMsS0FBSyxDQUFWLEVBQWE7QUFDVCxXQUFPLENBQVA7QUFDSDs7QUFFRCxNQUFJQSxDQUFDLElBQUksSUFBVCxFQUFlO0FBQ1gsVUFBTSxhQUFOO0FBQ0g7O0FBRUQsTUFBSUEsQ0FBQyxHQUFHLENBQVIsRUFBVztBQUNQLFVBQU0sZUFBTjtBQUNIOztBQUVELFNBQU9BLENBQUMsR0FBR0YsSUFBSSxDQUFDQyxTQUFMLENBQWVDLENBQUMsR0FBRyxDQUFuQixDQUFYO0FBQ0gsQ0FkRDtBQWdCQTs7Ozs7Ozs7OztBQVFBRixJQUFJLENBQUNHLE9BQUwsR0FBZSxVQUFVRCxDQUFWLEVBQWE7QUFDeEIsTUFBSUEsQ0FBQyxLQUFLLENBQU4sSUFBV0EsQ0FBQyxLQUFLLENBQXJCLEVBQXdCO0FBQ3BCLFdBQU8sS0FBUDtBQUNIOztBQUNELE1BQUlBLENBQUMsR0FBRyxDQUFSLEVBQVc7QUFDUCxVQUFNLG1DQUFOO0FBQ0g7O0FBQ0QsT0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixDQUFwQixFQUF1QkUsQ0FBQyxFQUF4QixFQUNJLElBQUlGLENBQUMsR0FBR0UsQ0FBSixLQUFVLENBQWQsRUFBaUIsT0FBTyxLQUFQOztBQUNyQixTQUFPLElBQVA7QUFFSCxDQVhEO0FBY0E7Ozs7Ozs7Ozs7O0FBU0FKLElBQUksQ0FBQ0ssUUFBTCxHQUFnQixVQUFTSCxDQUFULEVBQVk7QUFFeEIsTUFBSUksS0FBSyxHQUFHLENBQVo7O0FBRUEsT0FBS0YsQ0FBQyxHQUFDLENBQVAsRUFBVUEsQ0FBQyxJQUFFRixDQUFiLEVBQWdCLEVBQUVFLENBQWxCLEVBQ0E7QUFDSSxRQUFJSixJQUFJLENBQUNHLE9BQUwsQ0FBYUMsQ0FBYixDQUFKLEVBQ0E7QUFDSUUsTUFBQUEsS0FBSyxJQUFFRixDQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFPRSxLQUFQO0FBQ0gsQ0FiRDtBQWVBOzs7Ozs7Ozs7Ozs7OztBQVlBTixJQUFJLENBQUNPLFFBQUwsR0FBZ0IsVUFBU0wsQ0FBVCxFQUFZO0FBRXhCLE1BQUlNLE9BQU8sR0FBRyxFQUFkOztBQUVBLE9BQUssSUFBSUMsTUFBTSxHQUFHLENBQWxCLEVBQXFCQSxNQUFNLElBQUlQLENBQS9CLEVBQWtDTyxNQUFNLEVBQXhDLEVBQTRDO0FBRXhDLFFBQUlBLE1BQU0sR0FBRyxDQUFULElBQWMsQ0FBZCxJQUFtQkEsTUFBTSxHQUFHLENBQVQsSUFBYyxDQUFyQyxFQUF3QztBQUNwQ0QsTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWMsVUFBZDtBQUNILEtBRkQsTUFFTSxJQUFJRCxNQUFNLEdBQUcsQ0FBVCxJQUFjLENBQWxCLEVBQXFCO0FBQ3ZCRCxNQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYyxNQUFkO0FBQ0gsS0FGSyxNQUVBLElBQUlELE1BQU0sR0FBRyxDQUFULElBQWMsQ0FBbEIsRUFBcUI7QUFDdkJELE1BQUFBLE9BQU8sQ0FBQ0UsSUFBUixDQUFhLE1BQWI7QUFDSCxLQUZLLE1BRUE7QUFDRkYsTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWFELE1BQWI7QUFDSDtBQUVKOztBQUVELFNBQU9ELE9BQVA7QUFDSCxDQW5CRDtBQXFCQTs7Ozs7Ozs7Ozs7QUFTQVIsSUFBSSxDQUFDVyxNQUFMLEdBQWMsVUFBVUMsTUFBVixFQUFrQjtBQUU1QixNQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxPQUFLLElBQUlULENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ1EsTUFBTSxDQUFDRSxNQUF2QixFQUErQixFQUFFVixDQUFqQyxFQUNBO0FBQ0ksUUFBSVEsTUFBTSxDQUFDUixDQUFELENBQU4sSUFBYSxHQUFqQixFQUNBO0FBQ0lTLE1BQUFBLE9BQU8sSUFBSUUsTUFBTSxDQUFDQyxZQUFQLENBQW9CSixNQUFNLENBQUNSLENBQUQsQ0FBTixDQUFVYSxVQUFWLENBQXFCLENBQXJCLElBQXdCLENBQTVDLENBQVg7QUFDSCxLQUhELE1BS0E7QUFDSUosTUFBQUEsT0FBTyxJQUFJLEdBQVg7QUFDSDtBQUNKOztBQUVELFNBQVFBLE9BQVI7QUFDSCxDQWpCRDtBQW1CQTs7Ozs7Ozs7Ozs7Ozs7QUFZQWIsSUFBSSxDQUFDa0IsS0FBTCxHQUFhLFVBQVNDLEtBQVQsRUFBZ0IsQ0FJNUIsQ0FKRDs7QUFPQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsSUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgVXRpbCA9IHt9O1xuVXRpbC5mYWN0b3JpYWwgPSAobikgPT4ge1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChuID49IDMwMDApIHtcbiAgICAgICAgdGhyb3cgJ24gdG9vIGxhcmdlJ1xuICAgIH1cblxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyAnbiBpcyBuZWdhdGl2ZSdcbiAgICB9XG5cbiAgICByZXR1cm4gbiAqIFV0aWwuZmFjdG9yaWFsKG4gLSAxKTtcbn07XG5cbi8qKlxuICogRMOpdGVybWluZSBzaSBuIGVzdCB1biBub21icmUgcHJlbWllci5cbiAqIFV0aWwuaXNQcmltZSg1KSA9PiBmYWxzZVxuICogVXRpbC5pc1ByaW1lKDYpID0+IHRydWVcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblV0aWwuaXNQcmltZSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgaWYgKG4gPT09IDEgfHwgbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyAnVW5hYmxlIHRvIGNvbXB1dGUgcHJpbWUgZm9yIG4gPCAwJ1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IG47IGkrKylcbiAgICAgICAgaWYgKG4gJSBpID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG5cbn07XG5cblxuLyoqXG4gKiBBZGRpdGlvbm5lIGwnZW5zZW1ibGUgZGVzIG5vbWJyZXMgcHJlbWllcnMgZGUgMiDDoCBuXG4gKlxuICogVXRpbC5zdW1QcmltZSg2KSA9IDIgKyAzICsgNSA9IDEwXG4gKiBVdGlsLnN1bVByaW1lKDgpID0gMiArIDMgKyA1ICsgNyA9IDE3XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cblV0aWwuc3VtUHJpbWUgPSBmdW5jdGlvbihuKSB7XG5cbiAgICBsZXQgc29tbWUgPSAwO1xuXG4gICAgZm9yIChpPTI7IGk8PW47ICsraSlcbiAgICB7XG4gICAgICAgIGlmIChVdGlsLmlzUHJpbWUoaSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNvbW1lKz1pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvbW1lO1xufTtcblxuLyoqXG4gKiBDZXR0ZSBtw6l0aG9kZSBkb2l0IHJldG91cm5lciB1biB0YWJsZWF1IGRlIDEgw6AgbiB0ZWwgcXVlOlxuICogLSBQb3VyIGxlcyBub21icmVzIG11bHRpcGxlcyBkZSAzLCBsZXMgcmVtcGxhY2VyIHBhciBcIkZpenpcIlxuICogLSBQb3VyIGxlcyBub21icmVzIG11bHRpcGxlcyBkZSA1LCBsZXMgcmVtcGxhY2VyIHBhciBcIkJ1enpcIlxuICogLSBQb3VyIGxlcyBub21icmVzIG11bHRpcGxlcyBkZSAzIGV0IDUsIGxlcyByZW1wbGFjZXIgcGFyIFwiRml6ekJ1enpcIlxuICpcbiAqIEV4cCA6XG4gKiBVdGlsLmZpenpCdXp6KDE1KSA9PiBbMSwgMiwgXCJGaXp6XCIsIDQsIFwiQnV6elwiLCBcIkZpenpcIiwgNywgOCwgXCJGaXp6XCIsIFwiQnV6elwiLCAxMSwgXCJGaXp6XCIsIDEzLCAxNCwgXCJGaXp6QnV6elwiXVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gKiBAcmV0dXJucyB7YXJyYXl9XG4gKi9cblV0aWwuZml6ekJ1enogPSBmdW5jdGlvbihuKSB7XG5cbiAgICB2YXIgdGFibGVhdSA9IFtdO1xuXG4gICAgZm9yIChsZXQgbnVtYmVyID0gMTsgbnVtYmVyIDw9IG47IG51bWJlcisrKSB7XG5cbiAgICAgICAgaWYgKG51bWJlciAlIDMgPT0gMCAmJiBudW1iZXIgJSA1ID09IDApIHtcbiAgICAgICAgICAgIHRhYmxlYXUucHVzaCggXCJGaXp6QnV6elwiKTtcbiAgICAgICAgfWVsc2UgaWYgKG51bWJlciAlIDMgPT0gMCkge1xuICAgICAgICAgICAgdGFibGVhdS5wdXNoKCBcIkZpenpcIik7XG4gICAgICAgIH1lbHNlIGlmIChudW1iZXIgJSA1ID09IDApIHtcbiAgICAgICAgICAgIHRhYmxlYXUucHVzaChcIkJ1enpcIik7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHRhYmxlYXUucHVzaChudW1iZXIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGVhdTtcbn07XG5cbi8qKlxuICogQ2hpZmZyZSB1bmUgcGhyYXNlIHNlbG9uIGxhIHLDqGdsZSBzdWl2YW50ZSA6IExlcyBBIGRldmllbm5lbnQgZGVzIEIsIGxlcyBCIGRlcyBDLCBldGMuXG4gKlxuICogRXhwIDpcbiAqIFV0aWwuY2lwaGVyKFwiVGVzdCBVbml0YWlyZVwiKSA9PiBcIlVmdHUgVG9qdWJqc2ZcIlxuICpcbiAqIEBwYXJhbSBwaHJhc2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblV0aWwuY2lwaGVyID0gZnVuY3Rpb24gKHBocmFzZSkge1xuXG4gICAgbGV0IHBocmFzZTIgPSBcIlwiO1xuXG4gICAgZm9yIChsZXQgaT0wOyBpPHBocmFzZS5sZW5ndGg7ICsraSlcbiAgICB7XG4gICAgICAgIGlmIChwaHJhc2VbaV0gIT0gXCIgXCIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBocmFzZTIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwaHJhc2VbaV0uY2hhckNvZGVBdCgwKSsxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBocmFzZTIgKz0gXCIgXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKHBocmFzZTIpXG59O1xuXG4vKipcbiAqIFJldG91cm5lIGxlIG5vbWJyZSBkZSBwYWlyZXMgZGFucyB1biB0YWJsZWF1XG4gKlxuICogRXhwIDpcbiAqXG4gKiBVdGlsLnBhaXJzKFszLDNdKSA9PiAxXG4gKiBVdGlsLnBhaXJzKFszLDMsNSxdKSA9PiAxXG4gKiBVdGlsLnBhaXJzKFszLDMsNSw1LDVdKSA9PiA0XG4gKlxuICogQHBhcmFtIGFycmF5XG4gKiBAcmV0dXJuIGludFxuICovXG5VdGlsLnBhaXJzID0gZnVuY3Rpb24oYXJyYXkpIHtcblxuXG5cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsO1xuXG4iXX0=