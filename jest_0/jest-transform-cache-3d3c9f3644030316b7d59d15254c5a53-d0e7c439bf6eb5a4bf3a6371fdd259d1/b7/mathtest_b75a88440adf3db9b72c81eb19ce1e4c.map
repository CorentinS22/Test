{"version":3,"sources":["math.test.js"],"names":["Util","require","test","expect","factorial","toBe","toThrow","describe","isPrime","each","n","expected","sumPrime","fizzBuzz","toStrictEqual","cipher"],"mappings":"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","sourcesContent":["const Util = require('./math');\ntest('Test factoriel de 0 => 1', () => {\n    expect(Util.factorial(0)).toBe(1);\n});\n\ntest('Test factoriel de 2 => 2', () => {\n    expect(Util.factorial(3)).toBe(6);\n});\n\ntest('Test factoriel de 3 => 6', () => {\n    expect(Util.factorial(3)).toBe(6);\n});\n\ntest('Test factoriel de 3000', () => {\n    expect(()=> {Util.factorial(3000)}).toThrow();\n});\n\ntest('Test factoriel -10', () => {\n    expect(()=> {Util.factorial(-10)}).toThrow(/negative/);\n});\n\n\ndescribe('isPrime', function () {\n\n    test('Test prime de 1 => false', () => {\n        expect(Util.isPrime(1)).toBe(false)\n    });\n    test('Test prime de 0 => false', () => {\n        expect(Util.isPrime(0)).toBe(false)\n    });\n    test('Test prime < 0 => throw exception', () => {\n        expect(() => { Util.isPrime(-10) }).toThrow('Unable to compute prime for n < 0');\n    });\n\n    test.each([\n        [2, true],\n        [5, true],\n        [17, true],\n        [18, false],\n        [53, true],\n        [55, false],\n    ])(\n        'isPrime %i equals to %i',\n        (n, expected) => {\n            expect(Util.isPrime(n)).toBe(expected);\n        }\n    );\n});\n\ntest('Test addition des nombres premiers de 2 à 6', () => {\n    expect(Util.sumPrime(6)).toBe(10);\n});\n\ntest('Test fizzBuzz 1 à 15', () => {\n    expect(Util.fizzBuzz(15)).toStrictEqual([1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]);\n});\n\ntest('Test chiffrement', () => {\n    expect(Util.cipher(\"Test Unitaire\")).toBe(\"Uftu Vojubjsf\");\n});"]}