b824085ab689f115ca0de4e2877f6b73
const Util = require('./math');

test('Test factoriel de 0 => 1', () => {
  expect(Util.factorial(0)).toBe(1);
});
test('Test factoriel de 2 => 2', () => {
  expect(Util.factorial(3)).toBe(6);
});
test('Test factoriel de 3 => 6', () => {
  expect(Util.factorial(3)).toBe(6);
});
test('Test factoriel de 3000', () => {
  expect(() => {
    Util.factorial(3000);
  }).toThrow();
});
test('Test factoriel -10', () => {
  expect(() => {
    Util.factorial(-10);
  }).toThrow(/negative/);
});
describe('isPrime', function () {
  test('Test prime de 1 => false', () => {
    expect(Util.isPrime(1)).toBe(false);
  });
  test('Test prime de 0 => false', () => {
    expect(Util.isPrime(0)).toBe(false);
  });
  test('Test prime < 0 => throw exception', () => {
    expect(() => {
      Util.isPrime(-10);
    }).toThrow('Unable to compute prime for n < 0');
  });
  test.each([[2, true], [5, true], [17, true], [18, false], [53, true], [55, false]])('isPrime %i equals to %i', (n, expected) => {
    expect(Util.isPrime(n)).toBe(expected);
  });
});
test('Test addition des nombres premiers de 2 à 6', () => {
  expect(Util.sumPrime(6)).toBe(10);
});
test('Test fizzBuzz 1 à 15', () => {
  expect(Util.fizzBuzz(15)).toStrictEqual([1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz"]);
});
test('Test chiffrement', () => {
  expect(Util.cipher("Test Unitaire")).toBe("Uftu Vojubjsf");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGgudGVzdC5qcyJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsInRlc3QiLCJleHBlY3QiLCJmYWN0b3JpYWwiLCJ0b0JlIiwidG9UaHJvdyIsImRlc2NyaWJlIiwiaXNQcmltZSIsImVhY2giLCJuIiwiZXhwZWN0ZWQiLCJzdW1QcmltZSIsImZpenpCdXp6IiwidG9TdHJpY3RFcXVhbCIsImNpcGhlciJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQUMsSUFBSSxDQUFDLDBCQUFELEVBQTZCLE1BQU07QUFDbkNDLEVBQUFBLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDSSxTQUFMLENBQWUsQ0FBZixDQUFELENBQU4sQ0FBMEJDLElBQTFCLENBQStCLENBQS9CO0FBQ0gsQ0FGRyxDQUFKO0FBSUFILElBQUksQ0FBQywwQkFBRCxFQUE2QixNQUFNO0FBQ25DQyxFQUFBQSxNQUFNLENBQUNILElBQUksQ0FBQ0ksU0FBTCxDQUFlLENBQWYsQ0FBRCxDQUFOLENBQTBCQyxJQUExQixDQUErQixDQUEvQjtBQUNILENBRkcsQ0FBSjtBQUlBSCxJQUFJLENBQUMsMEJBQUQsRUFBNkIsTUFBTTtBQUNuQ0MsRUFBQUEsTUFBTSxDQUFDSCxJQUFJLENBQUNJLFNBQUwsQ0FBZSxDQUFmLENBQUQsQ0FBTixDQUEwQkMsSUFBMUIsQ0FBK0IsQ0FBL0I7QUFDSCxDQUZHLENBQUo7QUFJQUgsSUFBSSxDQUFDLHdCQUFELEVBQTJCLE1BQU07QUFDakNDLEVBQUFBLE1BQU0sQ0FBQyxNQUFLO0FBQUNILElBQUFBLElBQUksQ0FBQ0ksU0FBTCxDQUFlLElBQWY7QUFBcUIsR0FBNUIsQ0FBTixDQUFvQ0UsT0FBcEM7QUFDSCxDQUZHLENBQUo7QUFJQUosSUFBSSxDQUFDLG9CQUFELEVBQXVCLE1BQU07QUFDN0JDLEVBQUFBLE1BQU0sQ0FBQyxNQUFLO0FBQUNILElBQUFBLElBQUksQ0FBQ0ksU0FBTCxDQUFlLENBQUMsRUFBaEI7QUFBb0IsR0FBM0IsQ0FBTixDQUFtQ0UsT0FBbkMsQ0FBMkMsVUFBM0M7QUFDSCxDQUZHLENBQUo7QUFLQUMsUUFBUSxDQUFDLFNBQUQsRUFBWSxZQUFZO0FBRTVCTCxFQUFBQSxJQUFJLENBQUMsMEJBQUQsRUFBNkIsTUFBTTtBQUNuQ0MsSUFBQUEsTUFBTSxDQUFDSCxJQUFJLENBQUNRLE9BQUwsQ0FBYSxDQUFiLENBQUQsQ0FBTixDQUF3QkgsSUFBeEIsQ0FBNkIsS0FBN0I7QUFDSCxHQUZHLENBQUo7QUFHQUgsRUFBQUEsSUFBSSxDQUFDLDBCQUFELEVBQTZCLE1BQU07QUFDbkNDLElBQUFBLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDUSxPQUFMLENBQWEsQ0FBYixDQUFELENBQU4sQ0FBd0JILElBQXhCLENBQTZCLEtBQTdCO0FBQ0gsR0FGRyxDQUFKO0FBR0FILEVBQUFBLElBQUksQ0FBQyxtQ0FBRCxFQUFzQyxNQUFNO0FBQzVDQyxJQUFBQSxNQUFNLENBQUMsTUFBTTtBQUFFSCxNQUFBQSxJQUFJLENBQUNRLE9BQUwsQ0FBYSxDQUFDLEVBQWQ7QUFBbUIsS0FBNUIsQ0FBTixDQUFvQ0YsT0FBcEMsQ0FBNEMsbUNBQTVDO0FBQ0gsR0FGRyxDQUFKO0FBSUFKLEVBQUFBLElBQUksQ0FBQ08sSUFBTCxDQUFVLENBQ04sQ0FBQyxDQUFELEVBQUksSUFBSixDQURNLEVBRU4sQ0FBQyxDQUFELEVBQUksSUFBSixDQUZNLEVBR04sQ0FBQyxFQUFELEVBQUssSUFBTCxDQUhNLEVBSU4sQ0FBQyxFQUFELEVBQUssS0FBTCxDQUpNLEVBS04sQ0FBQyxFQUFELEVBQUssSUFBTCxDQUxNLEVBTU4sQ0FBQyxFQUFELEVBQUssS0FBTCxDQU5NLENBQVYsRUFRSSx5QkFSSixFQVNJLENBQUNDLENBQUQsRUFBSUMsUUFBSixLQUFpQjtBQUNiUixJQUFBQSxNQUFNLENBQUNILElBQUksQ0FBQ1EsT0FBTCxDQUFhRSxDQUFiLENBQUQsQ0FBTixDQUF3QkwsSUFBeEIsQ0FBNkJNLFFBQTdCO0FBQ0gsR0FYTDtBQWFILENBekJPLENBQVI7QUEyQkFULElBQUksQ0FBQyw2Q0FBRCxFQUFnRCxNQUFNO0FBQ3REQyxFQUFBQSxNQUFNLENBQUNILElBQUksQ0FBQ1ksUUFBTCxDQUFjLENBQWQsQ0FBRCxDQUFOLENBQXlCUCxJQUF6QixDQUE4QixFQUE5QjtBQUNILENBRkcsQ0FBSjtBQUlBSCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUMvQkMsRUFBQUEsTUFBTSxDQUFDSCxJQUFJLENBQUNhLFFBQUwsQ0FBYyxFQUFkLENBQUQsQ0FBTixDQUEwQkMsYUFBMUIsQ0FBd0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxDQUFmLEVBQWtCLE1BQWxCLEVBQTBCLE1BQTFCLEVBQWtDLENBQWxDLEVBQXFDLENBQXJDLEVBQXdDLE1BQXhDLEVBQWdELE1BQWhELEVBQXdELEVBQXhELEVBQTRELE1BQTVELEVBQW9FLEVBQXBFLEVBQXdFLEVBQXhFLEVBQTRFLFVBQTVFLENBQXhDO0FBQ0gsQ0FGRyxDQUFKO0FBSUFaLElBQUksQ0FBQyxrQkFBRCxFQUFxQixNQUFNO0FBQzNCQyxFQUFBQSxNQUFNLENBQUNILElBQUksQ0FBQ2UsTUFBTCxDQUFZLGVBQVosQ0FBRCxDQUFOLENBQXFDVixJQUFyQyxDQUEwQyxlQUExQztBQUNILENBRkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWwgPSByZXF1aXJlKCcuL21hdGgnKTtcbnRlc3QoJ1Rlc3QgZmFjdG9yaWVsIGRlIDAgPT4gMScsICgpID0+IHtcbiAgICBleHBlY3QoVXRpbC5mYWN0b3JpYWwoMCkpLnRvQmUoMSk7XG59KTtcblxudGVzdCgnVGVzdCBmYWN0b3JpZWwgZGUgMiA9PiAyJywgKCkgPT4ge1xuICAgIGV4cGVjdChVdGlsLmZhY3RvcmlhbCgzKSkudG9CZSg2KTtcbn0pO1xuXG50ZXN0KCdUZXN0IGZhY3RvcmllbCBkZSAzID0+IDYnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFV0aWwuZmFjdG9yaWFsKDMpKS50b0JlKDYpO1xufSk7XG5cbnRlc3QoJ1Rlc3QgZmFjdG9yaWVsIGRlIDMwMDAnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpPT4ge1V0aWwuZmFjdG9yaWFsKDMwMDApfSkudG9UaHJvdygpO1xufSk7XG5cbnRlc3QoJ1Rlc3QgZmFjdG9yaWVsIC0xMCcsICgpID0+IHtcbiAgICBleHBlY3QoKCk9PiB7VXRpbC5mYWN0b3JpYWwoLTEwKX0pLnRvVGhyb3coL25lZ2F0aXZlLyk7XG59KTtcblxuXG5kZXNjcmliZSgnaXNQcmltZScsIGZ1bmN0aW9uICgpIHtcblxuICAgIHRlc3QoJ1Rlc3QgcHJpbWUgZGUgMSA9PiBmYWxzZScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KFV0aWwuaXNQcmltZSgxKSkudG9CZShmYWxzZSlcbiAgICB9KTtcbiAgICB0ZXN0KCdUZXN0IHByaW1lIGRlIDAgPT4gZmFsc2UnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChVdGlsLmlzUHJpbWUoMCkpLnRvQmUoZmFsc2UpXG4gICAgfSk7XG4gICAgdGVzdCgnVGVzdCBwcmltZSA8IDAgPT4gdGhyb3cgZXhjZXB0aW9uJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoKCkgPT4geyBVdGlsLmlzUHJpbWUoLTEwKSB9KS50b1Rocm93KCdVbmFibGUgdG8gY29tcHV0ZSBwcmltZSBmb3IgbiA8IDAnKTtcbiAgICB9KTtcblxuICAgIHRlc3QuZWFjaChbXG4gICAgICAgIFsyLCB0cnVlXSxcbiAgICAgICAgWzUsIHRydWVdLFxuICAgICAgICBbMTcsIHRydWVdLFxuICAgICAgICBbMTgsIGZhbHNlXSxcbiAgICAgICAgWzUzLCB0cnVlXSxcbiAgICAgICAgWzU1LCBmYWxzZV0sXG4gICAgXSkoXG4gICAgICAgICdpc1ByaW1lICVpIGVxdWFscyB0byAlaScsXG4gICAgICAgIChuLCBleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KFV0aWwuaXNQcmltZShuKSkudG9CZShleHBlY3RlZCk7XG4gICAgICAgIH1cbiAgICApO1xufSk7XG5cbnRlc3QoJ1Rlc3QgYWRkaXRpb24gZGVzIG5vbWJyZXMgcHJlbWllcnMgZGUgMiDDoCA2JywgKCkgPT4ge1xuICAgIGV4cGVjdChVdGlsLnN1bVByaW1lKDYpKS50b0JlKDEwKTtcbn0pO1xuXG50ZXN0KCdUZXN0IGZpenpCdXp6IDEgw6AgMTUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFV0aWwuZml6ekJ1enooMTUpKS50b1N0cmljdEVxdWFsKFsxLCAyLCBcIkZpenpcIiwgNCwgXCJCdXp6XCIsIFwiRml6elwiLCA3LCA4LCBcIkZpenpcIiwgXCJCdXp6XCIsIDExLCBcIkZpenpcIiwgMTMsIDE0LCBcIkZpenpCdXp6XCJdKTtcbn0pO1xuXG50ZXN0KCdUZXN0IGNoaWZmcmVtZW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChVdGlsLmNpcGhlcihcIlRlc3QgVW5pdGFpcmVcIikpLnRvQmUoXCJVZnR1IFZvanVianNmXCIpO1xufSk7Il19