{"version":3,"sources":["interval.test.js"],"names":["Interval","require","describe","test","interval1","interval2","expect","overlaps","toBe","includes","resultat","union","toStrictEqual","intersection"],"mappings":"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","sourcesContent":["const Interval = require('./interval.js');\r\n\r\ndescribe('Overlaps', function () {\r\n\r\n    test('Test interval true', () => {\r\n        let interval1 = new Interval(0,24);\r\n        let interval2 = new Interval(6,34);\r\n        expect(interval1.overlaps(interval2)).toBe(true);\r\n    });\r\n\r\n    test('Test interval false', () => {\r\n        let interval1 = new Interval(0,24);\r\n        let interval2 = new Interval(25,46);\r\n        expect(interval1.overlaps(interval2)).toBe(false);\r\n    });\r\n\r\n});\r\n\r\ndescribe('Includes', function () {\r\n    let interval1 = new Interval(0,10);\r\n\r\n    test('Test interval includes true', () => {\r\n        let interval2 = new Interval(4,8);\r\n        expect(interval1.includes(interval2)).toBe(true)\r\n    });\r\n\r\n    test('Test interval includes false', () => {\r\n        let interval2 = new Interval(5,16);\r\n        expect(interval1.includes(interval2)).toBe(false)\r\n    });\r\n\r\n});\r\n\r\ndescribe('Union', function () {\r\n    let interval1 = new Interval(4,8);\r\n    let resultat, interval2;\r\n\r\n    test('Test interval union true', () => {\r\n        interval2 = new Interval(5,6);\r\n        resultat = new Interval(4,8);\r\n        expect(interval1.union(interval2)).toStrictEqual(resultat)\r\n    });\r\n\r\n    test('Test interval union true separate', () => {\r\n        interval2 = new Interval(1,4);\r\n        resultat = new Interval(1,8);\r\n        expect(interval1.union(interval2)).toStrictEqual(resultat)\r\n    });\r\n\r\n    test('Test interval union true separate', () => {\r\n        interval2 = new Interval(1,3);\r\n        resultat = [interval2,interval1];\r\n        expect(interval1.union(interval2)).toStrictEqual(resultat)\r\n    });\r\n\r\n    test('Test interval union true separate', () => {\r\n        interval2 = new Interval(10,40);\r\n        resultat = [interval1,interval2];\r\n        expect(interval1.union(interval2)).toStrictEqual(resultat)\r\n    });\r\n\r\n});\r\n\r\ndescribe('Intersection', function () {\r\n    let interval1 = new Interval(4,8);\r\n    let interval2, resultat;\r\n\r\n    test('Test interval intersection ', () => {\r\n        interval2 = new Interval(5,7);\r\n        resultat = new Interval(5,7);\r\n        expect(interval1.intersection(interval2)).toStrictEqual(resultat)\r\n    });\r\n    test('Test interval intersection', () => {\r\n        interval2 = new Interval(3,10);\r\n        resultat = new Interval(4,8);\r\n        expect(interval1.intersection(interval2)).toStrictEqual(resultat)\r\n    });\r\n    test('Test interval intersection', () => {\r\n        let interval2 = new Interval(6,9);\r\n        let resultat = new Interval(6,8);\r\n        expect(interval1.intersection(interval2)).toStrictEqual(resultat)\r\n    });\r\n\r\n    test('Test interval intersection', () => {\r\n        let interval2 = new Interval(3,5);\r\n        let resultat = new Interval(4,5);\r\n        expect(interval1.intersection(interval2)).toStrictEqual(resultat)\r\n    });\r\n    test('Test interval intersection null', () => {\r\n        let interval2 = new Interval(2,3);\r\n        expect(interval1.intersection(interval2)).toStrictEqual(null)\r\n    });\r\n});"]}